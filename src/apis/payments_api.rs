/*
 * SBanken API
 *
 * API for accessing bank information in SBanken
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use async_trait::async_trait;
use std::sync::Arc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use reqwest;

use super::{Error, configuration};

pub struct PaymentsApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl PaymentsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> PaymentsApiClient {
        PaymentsApiClient {
            configuration,
        }
    }
}

#[async_trait]
pub trait PaymentsApi {
    async fn get_payment(&self, account_id: &str, payment_id: &str, customer_id: Option<&str>) -> Result<crate::models::ItemResultPaymentV1, Error>;
    async fn list_payments(&self, account_id: &str, customer_id: Option<&str>, index: Option<i32>, length: Option<i32>) -> Result<crate::models::ListResultPaymentV1, Error>;
}

#[async_trait]
impl PaymentsApi for PaymentsApiClient {
    async fn get_payment(&self, account_id: &str, payment_id: &str, customer_id: Option<&str>) -> Result<crate::models::ItemResultPaymentV1, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/exec.bank/api/v1/Payments/{accountId}/{paymentId}", configuration.base_path, accountId=crate::apis::urlencode(account_id), paymentId=crate::apis::urlencode(payment_id));
        let mut req_builder = client.request(::reqwest::Method::GET, uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(param_value) = customer_id {
            req_builder = req_builder.header("customerId", param_value.to_string());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req).await?.error_for_status()?.json().await?)
    }

    async fn list_payments(&self, account_id: &str, customer_id: Option<&str>, index: Option<i32>, length: Option<i32>) -> Result<crate::models::ListResultPaymentV1, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/exec.bank/api/v1/Payments/{accountId}", configuration.base_path, accountId=crate::apis::urlencode(account_id));
        let mut req_builder = client.request(::reqwest::Method::GET, uri_str.as_str());

        if let Some(ref s) = index {
            req_builder = req_builder.query(&[("index", &s.to_string())]);
        }
        if let Some(ref s) = length {
            req_builder = req_builder.query(&[("length", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(param_value) = customer_id {
            req_builder = req_builder.header("customerId", param_value.to_string());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req).await?.error_for_status()?.json().await?)
    }

}
