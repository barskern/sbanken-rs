/*
 * SBanken API
 *
 * API for accessing bank information in SBanken
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use async_trait::async_trait;
use std::sync::Arc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use reqwest;

use super::{Error, configuration};

pub struct EFakturasApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl EFakturasApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> EFakturasApiClient {
        EFakturasApiClient {
            configuration,
        }
    }
}

#[async_trait]
pub trait EFakturasApi {
    async fn get_e_faktura(&self, customer_id: &str, e_faktura_id: &str) -> Result<crate::models::ItemResultEFakturaV1, Error>;
    async fn list_e_fakturas(&self, customer_id: &str, status: Option<&str>, start_date: Option<String>, end_date: Option<String>, index: Option<i32>, length: Option<i32>) -> Result<crate::models::ListResultEFakturaV1, Error>;
    async fn list_new_e_fakturas(&self, customer_id: &str, index: Option<i32>, length: Option<i32>) -> Result<crate::models::ListResultEFakturaSimpleV1, Error>;
    async fn pay_e_faktura(&self, customer_id: &str, e_faktura_pay_request_v1: Option<crate::models::EFakturaPayRequestV1>) -> Result<crate::models::NoResult, Error>;
}

#[async_trait]
impl EFakturasApi for EFakturasApiClient {
    async fn get_e_faktura(&self, customer_id: &str, e_faktura_id: &str) -> Result<crate::models::ItemResultEFakturaV1, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/exec.bank/api/v1/EFakturas/{eFakturaId}", configuration.base_path, eFakturaId=crate::apis::urlencode(e_faktura_id));
        let mut req_builder = client.request(::reqwest::Method::GET, uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("customerId", customer_id.to_string());
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req).await?.error_for_status()?.json().await?)
    }

    async fn list_e_fakturas(&self, customer_id: &str, status: Option<&str>, start_date: Option<String>, end_date: Option<String>, index: Option<i32>, length: Option<i32>) -> Result<crate::models::ListResultEFakturaV1, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/exec.bank/api/v1/EFakturas", configuration.base_path);
        let mut req_builder = client.request(::reqwest::Method::GET, uri_str.as_str());

        if let Some(ref s) = status {
            req_builder = req_builder.query(&[("status", &s.to_string())]);
        }
        if let Some(ref s) = start_date {
            req_builder = req_builder.query(&[("startDate", &s.to_string())]);
        }
        if let Some(ref s) = end_date {
            req_builder = req_builder.query(&[("endDate", &s.to_string())]);
        }
        if let Some(ref s) = index {
            req_builder = req_builder.query(&[("index", &s.to_string())]);
        }
        if let Some(ref s) = length {
            req_builder = req_builder.query(&[("length", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("customerId", customer_id.to_string());
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req).await?.error_for_status()?.json().await?)
    }

    async fn list_new_e_fakturas(&self, customer_id: &str, index: Option<i32>, length: Option<i32>) -> Result<crate::models::ListResultEFakturaSimpleV1, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/exec.bank/api/v1/EFakturas/new", configuration.base_path);
        let mut req_builder = client.request(::reqwest::Method::GET, uri_str.as_str());

        if let Some(ref s) = index {
            req_builder = req_builder.query(&[("index", &s.to_string())]);
        }
        if let Some(ref s) = length {
            req_builder = req_builder.query(&[("length", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("customerId", customer_id.to_string());
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req).await?.error_for_status()?.json().await?)
    }

    async fn pay_e_faktura(&self, customer_id: &str, e_faktura_pay_request_v1: Option<crate::models::EFakturaPayRequestV1>) -> Result<crate::models::NoResult, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/exec.bank/api/v1/EFakturas", configuration.base_path);
        let mut req_builder = client.request(::reqwest::Method::POST, uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.header("customerId", customer_id.to_string());
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&e_faktura_pay_request_v1);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req).await?.error_for_status()?.json().await?)
    }

}
