/*
 * SBanken API
 *
 * API for accessing bank information in SBanken
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`get_contact_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetContactInfoError {
    Status400(),
    Status401(),
    Status409(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_investment_accounts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetInvestmentAccountsError {
    Status400(),
    Status401(),
    Status409(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_loans`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLoansError {
    Status400(),
    Status401(),
    Status409(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_profile`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetProfileError {
    Status400(),
    Status401(),
    Status409(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_profile_accounts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetProfileAccountsError {
    Status400(),
    Status401(),
    Status409(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_profile`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateProfileError {
    Status400(),
    Status401(),
    Status409(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}


pub async fn get_contact_info(configuration: &configuration::Configuration, customer_id: &str) -> Result<crate::models::ItemResultCustomerV1, Error<GetContactInfoError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/exec.customers/api/v1/MyProfiles/contactinformation", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("customerId", &customer_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetContactInfoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_investment_accounts(configuration: &configuration::Configuration, customer_id: &str) -> Result<crate::models::ListResultInvestmentAccountItemV1, Error<GetInvestmentAccountsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/exec.customers/api/v1/MyProfiles/investmentaccounts", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("customerId", &customer_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetInvestmentAccountsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_loans(configuration: &configuration::Configuration, customer_id: &str) -> Result<crate::models::ListResultLoanAccountV1, Error<GetLoansError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/exec.customers/api/v1/MyProfiles/loans", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("customerId", &customer_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetLoansError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_profile(configuration: &configuration::Configuration, customer_id: &str) -> Result<crate::models::ItemResultMyProfileV1, Error<GetProfileError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/exec.customers/api/v1/MyProfiles/profile", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("customerId", &customer_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetProfileError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_profile_accounts(configuration: &configuration::Configuration, customer_id: &str) -> Result<crate::models::ListResultAccountV1, Error<GetProfileAccountsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/exec.customers/api/v1/MyProfiles/accounts", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("customerId", &customer_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetProfileAccountsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_profile(configuration: &configuration::Configuration, customer_id: &str, relationship_status: Option<crate::models::RelationshipStatusV1>, home_type: Option<crate::models::HomeTypeV1>, highest_complete_education: Option<crate::models::EducationLevelV1>, work_status: Option<&str>, main_employer: Option<&str>, has_children: Option<bool>, number_of_children_below18_at_home: Option<i32>, monthly_child_support_expenses: Option<i32>, monthly_child_care_expenses: Option<i32>, years_in_current_position: Option<i32>, salary_frequency: Option<crate::models::SalaryFrequencyV1>, monthly_rent: Option<i32>, monthly_rental_revenues: Option<i32>, yearly_income: Option<i32>, salary_date: Option<i32>, is_car_owner: Option<bool>) -> Result<crate::models::NoResult, Error<UpdateProfileError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/exec.customers/api/v1/MyProfiles/profile", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("customerId", &customer_id.to_string())]);
    if let Some(ref local_var_str) = relationship_status {
        local_var_req_builder = local_var_req_builder.query(&[("RelationshipStatus", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = home_type {
        local_var_req_builder = local_var_req_builder.query(&[("HomeType", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = highest_complete_education {
        local_var_req_builder = local_var_req_builder.query(&[("HighestCompleteEducation", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = work_status {
        local_var_req_builder = local_var_req_builder.query(&[("WorkStatus", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = main_employer {
        local_var_req_builder = local_var_req_builder.query(&[("MainEmployer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = has_children {
        local_var_req_builder = local_var_req_builder.query(&[("HasChildren", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = number_of_children_below18_at_home {
        local_var_req_builder = local_var_req_builder.query(&[("NumberOfChildrenBelow18AtHome", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = monthly_child_support_expenses {
        local_var_req_builder = local_var_req_builder.query(&[("MonthlyChildSupportExpenses", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = monthly_child_care_expenses {
        local_var_req_builder = local_var_req_builder.query(&[("MonthlyChildCareExpenses", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = years_in_current_position {
        local_var_req_builder = local_var_req_builder.query(&[("YearsInCurrentPosition", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = salary_frequency {
        local_var_req_builder = local_var_req_builder.query(&[("SalaryFrequency", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = monthly_rent {
        local_var_req_builder = local_var_req_builder.query(&[("MonthlyRent", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = monthly_rental_revenues {
        local_var_req_builder = local_var_req_builder.query(&[("MonthlyRentalRevenues", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = yearly_income {
        local_var_req_builder = local_var_req_builder.query(&[("YearlyIncome", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = salary_date {
        local_var_req_builder = local_var_req_builder.query(&[("SalaryDate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_car_owner {
        local_var_req_builder = local_var_req_builder.query(&[("IsCarOwner", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateProfileError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

