/*
 * SBanken API
 *
 * API for accessing bank information in SBanken
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use async_trait::async_trait;
use std::sync::Arc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use reqwest;

use super::{Error, configuration};

pub struct MyProfilesApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl MyProfilesApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> MyProfilesApiClient {
        MyProfilesApiClient {
            configuration,
        }
    }
}

#[async_trait]
pub trait MyProfilesApi {
    async fn get_contact_info(&self, customer_id: Option<&str>) -> Result<crate::models::ItemResultCustomerV1, Error>;
    async fn get_investment_accounts(&self, customer_id: Option<&str>) -> Result<crate::models::ListResultInvestmentAccountItemV1, Error>;
    async fn get_loans(&self, customer_id: Option<&str>) -> Result<crate::models::ListResultLoanAccountV1, Error>;
    async fn get_profile(&self, customer_id: Option<&str>) -> Result<crate::models::ItemResultMyProfileV1, Error>;
    async fn get_profile_accounts(&self, customer_id: Option<&str>) -> Result<crate::models::ListResultAccountV1, Error>;
    async fn update_profile(&self, customer_id: Option<&str>, relationship_status: Option<crate::models::RelationshipStatusV1>, home_type: Option<crate::models::HomeTypeV1>, highest_complete_education: Option<crate::models::EducationLevelV1>, work_status: Option<&str>, main_employer: Option<&str>, has_children: Option<bool>, number_of_children_below18_at_home: Option<i32>, monthly_child_support_expenses: Option<i32>, monthly_child_care_expenses: Option<i32>, years_in_current_position: Option<i32>, salary_frequency: Option<crate::models::SalaryFrequencyV1>, monthly_rent: Option<i32>, monthly_rental_revenues: Option<i32>, yearly_income: Option<i32>, salary_date: Option<i32>, is_car_owner: Option<bool>) -> Result<crate::models::NoResult, Error>;
}

#[async_trait]
impl MyProfilesApi for MyProfilesApiClient {
    async fn get_contact_info(&self, customer_id: Option<&str>) -> Result<crate::models::ItemResultCustomerV1, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/exec.customers/api/v1/MyProfiles/contactinformation", configuration.base_path);
        let mut req_builder = client.request(::reqwest::Method::GET, uri_str.as_str());

        if let Some(ref s) = customer_id {
            req_builder = req_builder.query(&[("customerId", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req).await?.error_for_status()?.json().await?)
    }

    async fn get_investment_accounts(&self, customer_id: Option<&str>) -> Result<crate::models::ListResultInvestmentAccountItemV1, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/exec.customers/api/v1/MyProfiles/investmentaccounts", configuration.base_path);
        let mut req_builder = client.request(::reqwest::Method::GET, uri_str.as_str());

        if let Some(ref s) = customer_id {
            req_builder = req_builder.query(&[("customerId", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req).await?.error_for_status()?.json().await?)
    }

    async fn get_loans(&self, customer_id: Option<&str>) -> Result<crate::models::ListResultLoanAccountV1, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/exec.customers/api/v1/MyProfiles/loans", configuration.base_path);
        let mut req_builder = client.request(::reqwest::Method::GET, uri_str.as_str());

        if let Some(ref s) = customer_id {
            req_builder = req_builder.query(&[("customerId", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req).await?.error_for_status()?.json().await?)
    }

    async fn get_profile(&self, customer_id: Option<&str>) -> Result<crate::models::ItemResultMyProfileV1, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/exec.customers/api/v1/MyProfiles/profile", configuration.base_path);
        let mut req_builder = client.request(::reqwest::Method::GET, uri_str.as_str());

        if let Some(ref s) = customer_id {
            req_builder = req_builder.query(&[("customerId", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req).await?.error_for_status()?.json().await?)
    }

    async fn get_profile_accounts(&self, customer_id: Option<&str>) -> Result<crate::models::ListResultAccountV1, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/exec.customers/api/v1/MyProfiles/accounts", configuration.base_path);
        let mut req_builder = client.request(::reqwest::Method::GET, uri_str.as_str());

        if let Some(ref s) = customer_id {
            req_builder = req_builder.query(&[("customerId", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req).await?.error_for_status()?.json().await?)
    }

    async fn update_profile(&self, customer_id: Option<&str>, relationship_status: Option<crate::models::RelationshipStatusV1>, home_type: Option<crate::models::HomeTypeV1>, highest_complete_education: Option<crate::models::EducationLevelV1>, work_status: Option<&str>, main_employer: Option<&str>, has_children: Option<bool>, number_of_children_below18_at_home: Option<i32>, monthly_child_support_expenses: Option<i32>, monthly_child_care_expenses: Option<i32>, years_in_current_position: Option<i32>, salary_frequency: Option<crate::models::SalaryFrequencyV1>, monthly_rent: Option<i32>, monthly_rental_revenues: Option<i32>, yearly_income: Option<i32>, salary_date: Option<i32>, is_car_owner: Option<bool>) -> Result<crate::models::NoResult, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/exec.customers/api/v1/MyProfiles/profile", configuration.base_path);
        let mut req_builder = client.request(::reqwest::Method::POST, uri_str.as_str());

        if let Some(ref s) = customer_id {
            req_builder = req_builder.query(&[("customerId", &s.to_string())]);
        }
        if let Some(ref s) = relationship_status {
            req_builder = req_builder.query(&[("RelationshipStatus", &s.to_string())]);
        }
        if let Some(ref s) = home_type {
            req_builder = req_builder.query(&[("HomeType", &s.to_string())]);
        }
        if let Some(ref s) = highest_complete_education {
            req_builder = req_builder.query(&[("HighestCompleteEducation", &s.to_string())]);
        }
        if let Some(ref s) = work_status {
            req_builder = req_builder.query(&[("WorkStatus", &s.to_string())]);
        }
        if let Some(ref s) = main_employer {
            req_builder = req_builder.query(&[("MainEmployer", &s.to_string())]);
        }
        if let Some(ref s) = has_children {
            req_builder = req_builder.query(&[("HasChildren", &s.to_string())]);
        }
        if let Some(ref s) = number_of_children_below18_at_home {
            req_builder = req_builder.query(&[("NumberOfChildrenBelow18AtHome", &s.to_string())]);
        }
        if let Some(ref s) = monthly_child_support_expenses {
            req_builder = req_builder.query(&[("MonthlyChildSupportExpenses", &s.to_string())]);
        }
        if let Some(ref s) = monthly_child_care_expenses {
            req_builder = req_builder.query(&[("MonthlyChildCareExpenses", &s.to_string())]);
        }
        if let Some(ref s) = years_in_current_position {
            req_builder = req_builder.query(&[("YearsInCurrentPosition", &s.to_string())]);
        }
        if let Some(ref s) = salary_frequency {
            req_builder = req_builder.query(&[("SalaryFrequency", &s.to_string())]);
        }
        if let Some(ref s) = monthly_rent {
            req_builder = req_builder.query(&[("MonthlyRent", &s.to_string())]);
        }
        if let Some(ref s) = monthly_rental_revenues {
            req_builder = req_builder.query(&[("MonthlyRentalRevenues", &s.to_string())]);
        }
        if let Some(ref s) = yearly_income {
            req_builder = req_builder.query(&[("YearlyIncome", &s.to_string())]);
        }
        if let Some(ref s) = salary_date {
            req_builder = req_builder.query(&[("SalaryDate", &s.to_string())]);
        }
        if let Some(ref s) = is_car_owner {
            req_builder = req_builder.query(&[("IsCarOwner", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.oauth_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req).await?.error_for_status()?.json().await?)
    }

}
