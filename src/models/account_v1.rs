/*
 * SBanken API
 *
 * API for accessing bank information in SBanken
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */


use serde::{Deserialize, Serialize};



#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountV1 {
    #[serde(rename = "accountId", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    #[serde(rename = "accountNumber", skip_serializing_if = "Option::is_none")]
    pub account_number: Option<String>,
    #[serde(rename = "ownerCustomerId", skip_serializing_if = "Option::is_none")]
    pub owner_customer_id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "accountType", skip_serializing_if = "Option::is_none")]
    pub account_type: Option<String>,
    #[serde(rename = "available", skip_serializing_if = "Option::is_none")]
    pub available: Option<f64>,
    #[serde(rename = "balance", skip_serializing_if = "Option::is_none")]
    pub balance: Option<f64>,
    #[serde(rename = "creditLimit", skip_serializing_if = "Option::is_none")]
    pub credit_limit: Option<f64>,
}

impl AccountV1 {
    pub fn new() -> AccountV1 {
        AccountV1 {
            account_id: None,
            account_number: None,
            owner_customer_id: None,
            name: None,
            account_type: None,
            available: None,
            balance: None,
            credit_limit: None,
        }
    }
}


