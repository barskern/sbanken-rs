/*
 * SBanken API
 *
 * API for accessing bank information in SBanken
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */


use serde::{Deserialize, Serialize};



#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct MyProfileV1 {
    #[serde(rename = "relationshipStatus", skip_serializing_if = "Option::is_none")]
    pub relationship_status: Option<crate::models::RelationshipStatusV1>,
    #[serde(rename = "homeType", skip_serializing_if = "Option::is_none")]
    pub home_type: Option<crate::models::HomeTypeV1>,
    #[serde(rename = "highestCompleteEducation", skip_serializing_if = "Option::is_none")]
    pub highest_complete_education: Option<crate::models::EducationLevelV1>,
    #[serde(rename = "workStatus", skip_serializing_if = "Option::is_none")]
    pub work_status: Option<String>,
    #[serde(rename = "mainEmployer", skip_serializing_if = "Option::is_none")]
    pub main_employer: Option<String>,
    #[serde(rename = "hasChildren", skip_serializing_if = "Option::is_none")]
    pub has_children: Option<bool>,
    #[serde(rename = "numberOfChildrenBelow18AtHome", skip_serializing_if = "Option::is_none")]
    pub number_of_children_below18_at_home: Option<i32>,
    #[serde(rename = "monthlyChildSupportExpenses", skip_serializing_if = "Option::is_none")]
    pub monthly_child_support_expenses: Option<i32>,
    #[serde(rename = "monthlyChildCareExpenses", skip_serializing_if = "Option::is_none")]
    pub monthly_child_care_expenses: Option<i32>,
    #[serde(rename = "yearsInCurrentPosition", skip_serializing_if = "Option::is_none")]
    pub years_in_current_position: Option<i32>,
    #[serde(rename = "salaryFrequency", skip_serializing_if = "Option::is_none")]
    pub salary_frequency: Option<crate::models::SalaryFrequencyV1>,
    #[serde(rename = "monthlyRent", skip_serializing_if = "Option::is_none")]
    pub monthly_rent: Option<i32>,
    #[serde(rename = "monthlyRentalRevenues", skip_serializing_if = "Option::is_none")]
    pub monthly_rental_revenues: Option<i32>,
    #[serde(rename = "yearlyIncome", skip_serializing_if = "Option::is_none")]
    pub yearly_income: Option<i32>,
    #[serde(rename = "salaryDate", skip_serializing_if = "Option::is_none")]
    pub salary_date: Option<i32>,
    #[serde(rename = "isCarOwner", skip_serializing_if = "Option::is_none")]
    pub is_car_owner: Option<bool>,
}

impl MyProfileV1 {
    pub fn new() -> MyProfileV1 {
        MyProfileV1 {
            relationship_status: None,
            home_type: None,
            highest_complete_education: None,
            work_status: None,
            main_employer: None,
            has_children: None,
            number_of_children_below18_at_home: None,
            monthly_child_support_expenses: None,
            monthly_child_care_expenses: None,
            years_in_current_position: None,
            salary_frequency: None,
            monthly_rent: None,
            monthly_rental_revenues: None,
            yearly_income: None,
            salary_date: None,
            is_car_owner: None,
        }
    }
}


